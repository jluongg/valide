-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

--ROLLBACK;

DROP TABLE IF EXISTS user_photos;
DROP TABLE IF EXISTS user_interests;
DROP TABLE IF EXISTS interests;
DROP TABLE IF EXISTS messages;
DROP TABLE IF EXISTS matches;
DROP TABLE IF EXISTS user_referrences;
DROP TABLE IF EXISTS user_profils;



-- User profiles table
CREATE TABLE user_profils(
	user_id character(36) PRIMARY KEY,
    email VARCHAR(256),
    phone_number VARCHAR(256),
    time_joined BIGINT NOT NULL,
	age SMALLINT NOT NULL,
	first_name VARCHAR(256) NOT NULL,
	gender VARCHAR(20),
    bio TEXT,
    location VARCHAR(100),
	preferred_gender VARCHAR(20),
	min_age SMALLINT,
    max_age SMALLINT,
	max_distance SMALLINT,
	availablity BOOLEAN,
	referrer_number_needed SMALLINT
);

-- Referrence table
CREATE TABLE user_referrences(
	referrence_id SERIAL PRIMARY KEY,
	user_id_referrer character(36) NOT NULL,
	user_id_referee character(36) NOT NULL,
	FOREIGN KEY (user_id_referrer) REFERENCES user_profils(user_id),
    FOREIGN KEY (user_id_referee) REFERENCES user_profils(user_id),
    CHECK (user_id_referrer <> user_id_referee) -- Ensures unique matches
);

-- Interests table
CREATE TABLE interests (
    interest_id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);

-- User interests (many-to-many relationship)
CREATE TABLE user_interests (
    user_id character(36) NOT NULL,
    interest_id INTEGER NOT NULL,
    PRIMARY KEY (user_id, interest_id),
    FOREIGN KEY (user_id) REFERENCES user_profils(user_id) ON DELETE CASCADE,
    FOREIGN KEY (interest_id) REFERENCES interests(interest_id) ON DELETE CASCADE
);

-- Matches table
CREATE TABLE matches (
    match_id SERIAL PRIMARY KEY,
    user_id1 character(36) NOT NULL,
    user_id2 character(36) NOT NULL,
    matched_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id1) REFERENCES user_profils(user_id),
    FOREIGN KEY (user_id2) REFERENCES user_profils(user_id),
    CHECK (user_id1 <> user_id2) -- Ensures unique matches
);

-- Messages table
CREATE TABLE messages (
    message_id SERIAL PRIMARY KEY,
    match_id INTEGER NOT NULL,
    sender_id character(36) NOT NULL,
    content TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    read_at TIMESTAMP,
    FOREIGN KEY (match_id) REFERENCES matches(match_id) ON DELETE CASCADE,
    FOREIGN KEY (sender_id) REFERENCES user_profils(user_id)
);


-- User photos table
CREATE TABLE user_photos (
    photo_id SERIAL PRIMARY KEY,
    user_id character(36) NOT NULL,
    photo_url VARCHAR(255) NOT NULL,
    is_primary BOOLEAN DEFAULT FALSE,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES user_profils(user_id) ON DELETE CASCADE
);


END;